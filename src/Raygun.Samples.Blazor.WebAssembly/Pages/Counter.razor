@page "/counter"
@using Raygun.Blazor.Models
@inject CounterViewModel ViewModel
@inject RaygunBlazorClient RaygunClient

<PageTitle>Counter</PageTitle>

<h1>Counter</h1>
<p>Every 3rd time you click the "Count Up" button, it throws an exception from a try-catch that is manually reported.</p>

<p role="status">Current count: @ViewModel.CurrentCount</p>

<button class="btn btn-primary" @onclick="@IncrementAsync">Handle Exception</button>
<button class="btn btn-primary" @onclick="@IncrementUserDetailsAsync">Handle Exception with UserDetails</button>
<button class="btn btn-primary" @onclick="@Throw">Throw Unhandled JS Exception</button>
<button class="btn btn-primary" @onclick="@(() => { var y = 0; var x = 3; var z = x / y; })">Throw .NET Exception</button>
<button class="btn btn-primary" onclick="window.raygunBlazor.recordBreadcrumb('Clicked manual button', 'click-event', null, 'warning', {});">Record JS Breadcrumb</button>
<button class="btn btn-primary" @onclick="@SendCustomJsException">Send Custom JS Exception</button>
<button class="btn btn-primary" @onclick="@SendCustomJsBreadcrumb">Send Custom JS Breadcrumb</button>

@code {

    protected override void OnInitialized()
    {
        ViewModel.StateHasChanged = StateHasChanged;
        //throw new Exception();
    }

    protected async Task IncrementAsync()
    {
        try
        {
            RaygunClient.RecordBreadcrumb("Handle Exception", BreadcrumbType.ClickEvent);
            await ViewModel.IncrementCountAsync();
        }
        catch (Exception ex)
        {
            await RaygunClient.RecordExceptionAsync(ex);
        }
    }

    protected async Task IncrementUserDetailsAsync()
    {
        try
        {
            RaygunClient.RecordBreadcrumb("Handle Exception with UserDetails", BreadcrumbType.ClickEvent);
            await ViewModel.IncrementCountAsync();
        }
        catch (Exception ex)
        {
            await RaygunClient.RecordExceptionAsync(ex, new UserDetails() { Email = "test@example.com", FullName = "Test User", UserId = "123456" });
        }
    }

    protected async Task Throw()
    {
        RaygunClient.RecordBreadcrumb("Throw Unhandled JS Exception", BreadcrumbType.ClickEvent);
        await ViewModel.ThrowException();
    }

    protected async Task SendCustomJsException()
    {
        RaygunClient.RecordBreadcrumb("Send Custom JS Exception", BreadcrumbType.ClickEvent);
        await ViewModel.SendCustomJsException();
    }

    protected async Task SendCustomJsBreadcrumb()
    {
        RaygunClient.RecordBreadcrumb(new BreadcrumbDetails(message: "Send Custom JS Breadcrumb",
            type: BreadcrumbType.ClickEvent, level: BreadcrumbLevel.Debug));
        await ViewModel.SendCustomJsBreadcrumb();
    }

}